{
  "version": 3,
  "sources": ["../src/modules/database.ts", "../src/client/restClient.ts", "../src/utils/configValidator.ts", "../src/config/statics.ts", "../src/config/cmConfig.ts", "../src/index.ts"],
  "sourcesContent": ["import { ApiResult, getMethod } from '@servicestack/client';\nimport chalk from 'chalk';\nimport { RestClient } from 'client';\nimport { CMConfig } from 'config';\nimport {\n  AggregateRequest,\n  CountRequest,\n  DeleteManyRequest,\n  DeleteOneRequest,\n  DistinctRequest,\n  FindOneRequest,\n  FindRequest,\n  FindTermsChildrenRequest,\n  FindTermsRequest,\n  InsertManyRequest,\n  InsertOneRequest,\n  ReplaceOneRequest,\n  ResponseStatus,\n  UpdateManyRequest,\n  UpdateOneRequest,\n} from 'types/codemash.dtos';\n\nconst isJsonResponse = (value: any): value is string =>\n  typeof value === 'string';\ninterface ICMDbResult {\n  response: any;\n  isSuccess: boolean;\n  isError: boolean;\n  responseStatus?: ResponseStatus;\n  errorStatus?: ResponseStatus;\n}\n\nconst transformApiResult = (target: ApiResult<any>): ICMDbResult => {\n  // transform given api string result to a js object.\n  const { isSuccess, response, isError, errorStatus } = target;\n  const { responseStatus, result } = response || {};\n\n  if (CMConfig.getInstance().showLogs) {\n    console.log(`Result for ${getMethod(target)} request: `, target.response);\n  }\n\n  return {\n    isSuccess,\n    isError,\n    errorStatus,\n    responseStatus,\n    response: isJsonResponse(result) ? JSON.parse(result) : response,\n  };\n};\n\nexport async function find(request: FindRequest) {\n  const client = new RestClient(CMConfig.getInstance());\n  const result = await client.dbRequest(request);\n  return transformApiResult(result);\n}\n\nexport async function findOne(request: FindOneRequest) {\n  const client = new RestClient(CMConfig.getInstance());\n  const result = await client.dbRequest(request);\n  return transformApiResult(result);\n}\n\nexport async function insertOne(request: InsertOneRequest) {\n  const client = new RestClient(CMConfig.getInstance());\n  const result = await client.dbRequest(request);\n  return transformApiResult(result);\n}\n\nexport async function insertMany(request: InsertManyRequest) {\n  const client = new RestClient(CMConfig.getInstance());\n  const result = await client.dbRequest(request);\n  return transformApiResult(result);\n}\n\nexport async function deleteOne(request: DeleteOneRequest) {\n  const client = new RestClient(CMConfig.getInstance());\n  const result = await client.dbRequest(request);\n  return transformApiResult(result);\n}\n\nexport async function deleteMany(request: DeleteManyRequest) {\n  const client = new RestClient(CMConfig.getInstance());\n  const result = await client.dbRequest(request);\n  return transformApiResult(result);\n}\n\nexport async function updateOne(request: UpdateOneRequest) {\n  const client = new RestClient(CMConfig.getInstance());\n  const result = await client.dbRequest(request);\n  return transformApiResult(result);\n}\n\nexport async function updateMany(request: UpdateManyRequest) {\n  const client = new RestClient(CMConfig.getInstance());\n  const result = await client.dbRequest(request);\n  return transformApiResult(result);\n}\n\nexport async function replaceOne(request: ReplaceOneRequest) {\n  const client = new RestClient(CMConfig.getInstance());\n  const result = await client.dbRequest(request);\n  return transformApiResult(result);\n}\n\nexport async function aggregate(request: AggregateRequest) {\n  const client = new RestClient(CMConfig.getInstance());\n  const result = await client.dbRequest(request);\n  return transformApiResult(result);\n}\n\nexport async function count(request: CountRequest) {\n  const client = new RestClient(CMConfig.getInstance());\n  const result = await client.dbRequest(request);\n  return transformApiResult(result);\n}\n\nexport async function distinct(request: DistinctRequest) {\n  const client = new RestClient(CMConfig.getInstance());\n  const result = await client.dbRequest(request);\n  return transformApiResult(result);\n}\n\nexport async function findTerms(request: FindTermsRequest) {\n  const client = new RestClient(CMConfig.getInstance());\n  const result = await client.dbRequest(request);\n  return transformApiResult(result);\n}\n\nexport async function findTermsChildren(request: FindTermsChildrenRequest) {\n  const client = new RestClient(CMConfig.getInstance());\n  const result = await client.dbRequest(request);\n  return transformApiResult(result);\n}\n", "import {\n  ApiResult,\n  getMethod,\n  IReturn,\n  JsonServiceClient,\n} from '@servicestack/client';\nimport chalk from 'chalk';\nimport { CMConfig } from 'config';\nimport { ICMConfig } from 'config/config';\n\nenum StringifiedFields {\n  Update = 'update',\n  Filter = 'filter',\n  Document = 'document',\n}\n\nenum StringifiedArrayFields {\n  Documents = 'documents',\n}\n\ntype DbFilter = {\n  [StringifiedFields.Filter]: object | string;\n};\ntype DbUpdate = {\n  [StringifiedFields.Update]: object | string;\n};\ntype DbDocument = {\n  [StringifiedFields.Document]: object | string;\n};\ntype DbDocuments = {\n  [StringifiedArrayFields.Documents]: object[] | string[];\n};\n\nexport class RestClient extends JsonServiceClient {\n  constructor(private config: ICMConfig) {\n    super(config.apiUrl);\n    if (this.config.isValid()) {\n      if (this.config.cluster) {\n        this.headers.set('X-CM-Cluster', this.config.cluster);\n      }\n      this.headers.set('Authorization', `Bearer ${this.config.apiKey}`);\n      this.headers.set('X-CM-ProjectId', this.config.projectId);\n    }\n  }\n\n  public dbRequest<TResponse>(\n    request: IReturn<TResponse> &\n      Partial<DbFilter & DbUpdate & DbDocument & DbDocuments>,\n    args?: any,\n    method?: string,\n  ): Promise<ApiResult<TResponse>> {\n    // stringify selected fields that are passed as objects.\n    Object.values(StringifiedFields).forEach((key) => {\n      const value = request[key];\n      if (value) {\n        request[key] =\n          typeof value !== 'string' ? JSON.stringify(value) : value;\n      }\n    });\n\n    Object.values(StringifiedArrayFields).forEach((key) => {\n      const value = request[key];\n      if (value) {\n        request[key] = value.map((i) =>\n          typeof i !== 'string' ? JSON.stringify(i) : i,\n        );\n      }\n    });\n\n    if (CMConfig.getInstance().showLogs) {\n      console.log(`Outgoing ${getMethod(request)} request: `, request);\n    }\n\n    return this.api((request as any) as IReturn<TResponse>, args, method);\n  }\n}\n", "import { ICMConfig } from 'config/config';\n\nexport class ConfigValidator {\n  constructor() {}\n\n  public ValidateCM(config: ICMConfig) {\n    if (config.apiKey === undefined || config.apiKey === '') {\n      throw new Error('CodeMash config is not valid, check CODEMASH_API_URL');\n    }\n    if (config.apiKey === undefined || config.apiKey === '') {\n      throw Error('CodeMash config is not valid, check CODEMASH_API_KEY');\n    }\n    if (config.projectId === undefined || config.projectId === '') {\n      throw Error('CodeMash config is not valid, check CODEMASH_PROJECT_ID');\n    }\n  }\n\n  public static AssertCMConfig(config: ICMConfig) {\n    const validator = new ConfigValidator();\n    validator.ValidateCM(config);\n  }\n}\n", "export class STATICS {\n\tstatic CODEMASH_API_URL: string = 'https://api.codemash.io';\n}\n", "import { ConfigValidator } from 'utils/configValidator';\n\nimport { ICMConfig, TValidCMClientConfig } from './config';\nimport { STATICS } from './statics';\n\nexport class CMConfig implements ICMConfig {\n  public apiUrl: string;\n\n  public apiKey?: string;\n\n  public projectId?: string;\n\n  public cluster?: string;\n\n  public baseFilePath?: string;\n\n  public region?: string;\n\n  public showLogs: boolean;\n\n  private static instance: CMConfig;\n\n  private constructor() {\n    this.apiUrl = process.env.CODEMASH_API_URL || STATICS.CODEMASH_API_URL;\n    this.apiKey = process.env.CODEMASH_API_KEY;\n    this.projectId = process.env.CODEMASH_PROJECT_ID;\n    this.cluster = process.env.CODEMASH_CLUSTER;\n    this.baseFilePath = process.env.CODEMASH_BASE_FILE_PATH;\n    this.region = process.env.CODEMASH_REGION;\n    this.showLogs = !!process.env.CODEMASH_SHOW_LOGS;\n  }\n\n  public static getInstance() {\n    if (CMConfig.instance) return CMConfig.instance;\n\n    this.instance = new CMConfig();\n    return this.instance;\n  }\n\n  public isValid(): this is TValidCMClientConfig {\n    return (\n      typeof this.apiKey === 'string' &&\n      typeof this.cluster === 'string' &&\n      typeof this.projectId === 'string'\n    );\n  }\n\n  public Validate(): void {\n    ConfigValidator.AssertCMConfig(this);\n  }\n}\n", "import * as databaseService from 'modules/database';\n// import * as filesService from './components/files';\n// import * as iamService from './components/iam';\n// import * as notificationsService from './components/push';\n// import * as emailsService from './components/email';\n// import * as codeService from './components/code';\n// import * as paymentsService from './components/payments';\n// import configuration from './config';\n\nexport const db = databaseService;\n// export const files = filesService;\n// export const iam = iamService;\n// export const notifications = notificationsService;\n// export const emails = emailsService;\n// export const code = codeService;\n// export const payments = paymentsService;\n// export const config = configuration;\n"],
  "mappings": "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",
  "names": []
}
